/my-project/
├── node_modules/
├── public/
│ ├── index.html
│ ├── script.js
│ └── cliente.js
│
├── server.js
├── package.json
├── data.json
├── alojamiento.json
└── indice.json




















_________
````
archivo public/index.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gestor de Contenido Dinámico</title> 
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 20px;
    background-color: #f4f4f4;
    color: #333;
}
.container {
    max-width: 800px;
    margin: auto;
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}
h1, h2 {
    color: #333;
}
button {
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
}
#save-button, #load-links-button {
    background-color: #007bff;
    color: white;
}
#load-links-button {
    background-color: #28a745;
}
ul {
    list-style-type: none;
    padding: 0;
}
li {
    background: #e9ecef;
    padding: 10px;
    margin-bottom: 8px;
    border-radius: 4px;
}
.status-message {
    margin-top: 10px;
    font-style: italic;
    color: #666;
}
#wikipedia-link-input {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
    box-sizing: border-box;
}
.accordion-header {
    background-color: #007bff;
    color: white;
    padding: 18px;
    width: 100%;
    border: none;
    text-align: left;
    outline: none;
    font-size: 18px;
    transition: background-color 0.3s ease;
    cursor: pointer;
    margin-top: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}
.accordion-header:hover {
    background-color: #0056b3;
}
.accordion-content {
    padding: 0 18px;
    background-color: white;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
    display: none;
}
</style>
</head>
<body>

    <div class="container">
        <h1>Gestor de Contenido Dinámico</h1>
        
        <h2>1. Guardar Enlace de Wikipedia</h2>
        <p>Introduce el título de un artículo de Wikipedia (ej: `Inteligencia_artificial`) y haz clic en el botón para guardar y mostrar el resumen.</p>
        <input type="text" id="wikipedia-link-input" placeholder="Ejemplo: Inteligencia_artificial">
        <button id="save-button">Guardar Enlace</button>
        <p class="status-message" id="message"></p>

        <hr>
        
        <h2>2. Artículo Guardado Anteriormente</h2>
        <p>Esta sección muestra el último artículo guardado en un menú desplegable.</p>
        
        <div id="accordion-header" class="accordion-header">
            <span>Haz clic para ver el artículo...</span>
        </div>
        <div id="accordion-content" class="accordion-content">
            <p></p>
        </div>

        <hr>

        <h2>3. Cargar Lista de Enlaces</h2>
        <p>Haz clic en el botón para obtener y mostrar todos los enlaces guardados en el archivo.</p>
        <button id="load-links-button">Cargar Enlaces</button>
        <p class="status-message" id="links-status"></p>
        <ul id="links-list">
            </ul>
        
    </div>
    <script src="script.js" type="module"></script>
    <script src="cliente.js"></script>
</body>
</html>

````
_________
````
archivo public/script.js

document.addEventListener('DOMContentLoaded', () => {
    // Nuevos elementos para la funcionalidad de enlaces
    const loadLinksButton = document.getElementById('load-links-button');
    const linksList = document.getElementById('links-list');
    const linksStatus = document.getElementById('links-status');
  
    // Lógica para cargar todos los enlaces guardados
    if (loadLinksButton) {
        loadLinksButton.addEventListener('click', async () => {
            linksStatus.textContent = 'Cargando enlaces...';
            linksList.innerHTML = '';
            try {
                const response = await fetch('/api/enlaces');
                const enlaces = await response.json();
  
                if (response.ok) {
                    if (enlaces.length > 0) {
                        enlaces.forEach(enlace => {
                            const li = document.createElement('li');
                            const a = document.createElement('a');
                            a.href = enlace.url;
                            a.textContent = enlace.title;
                            a.target = '_blank';
                            li.appendChild(a);
                            linksList.appendChild(li);
                        });
                        linksStatus.textContent = `Se cargaron ${enlaces.length} enlaces.`;
                    } else {
                        linksStatus.textContent = 'No hay enlaces guardados.';
                    }
                } else {
                    linksStatus.textContent = enlaces.error || 'No se pudieron cargar los enlaces.';
                }
            } catch (error) {
                console.error('Error al cargar los enlaces:', error);
                linksStatus.textContent = 'Hubo un problema al cargar los enlaces.';
            }
        });
    }

    // Lógica para el acordeón (desplegar/plegar)
    const accordionHeader = document.getElementById('accordion-header');
    const accordionContent = document.getElementById('accordion-content');

    if (accordionHeader) {
        accordionHeader.addEventListener('click', () => {
            if (accordionContent.style.maxHeight) {
                accordionContent.style.maxHeight = null;
                accordionContent.style.display = 'none';
            } else {
                accordionContent.style.display = 'block';
                accordionContent.style.maxHeight = accordionContent.scrollHeight + 'px';
            }
        });
    }
});

````
_________
````
archivo public/cliente.js

document.addEventListener('DOMContentLoaded', () => {
    const saveButton = document.getElementById('save-button');
    const messageElement = document.getElementById('message');
    const inputElement = document.getElementById('wikipedia-link-input');
    
    // Nuevos elementos para el acordeón
    const accordionHeader = document.getElementById('accordion-header');
    const accordionContent = document.getElementById('accordion-content');
    const accordionSpan = accordionHeader.querySelector('span'); // Selecciona el span dentro del header

    const loadLastArticle = async () => {
        accordionContent.style.maxHeight = '0';
        accordionContent.style.display = 'none';
        accordionSpan.textContent = 'Cargando artículo...';

        try {
            const response = await fetch('/api/articulo'); // Carga el último artículo guardado en data.json
            const result = await response.json();
            
            if (response.ok && result.title && result.summary) {
                // Actualizar el contenido del acordeón
                accordionSpan.textContent = result.title;
                accordionContent.innerHTML = `<p>${result.summary}</p>`;
                accordionContent.style.display = 'block';
                accordionContent.style.maxHeight = accordionContent.scrollHeight + 'px';
                
                messageElement.textContent = 'Página dinámica creada y contenido cargado.';
            } else {
                messageElement.textContent = result.error || 'No se pudo cargar el artículo.';
                accordionSpan.textContent = 'Error al cargar';
                accordionContent.innerHTML = `<p>${result.error || 'No se pudo cargar el artículo'}</p>`;
            }
        } catch (error) {
            console.error('Error al cargar el último artículo:', error);
            messageElement.textContent = 'Hubo un problema al conectar con el servidor para cargar el artículo.';
            accordionSpan.textContent = 'Error de conexión';
            accordionContent.innerHTML = `<p>Hubo un problema al conectar con el servidor.</p>`;
        }
    };
    
    if (saveButton) {
        saveButton.addEventListener('click', async () => {
            const pageTitle = inputElement.value.trim();
            if (!pageTitle) {
                messageElement.textContent = 'Por favor, introduce un título de Wikipedia.';
                return;
            }

            messageElement.textContent = 'Guardando resumen del artículo y actualizando vista...';
            try {
                // Llama a la ruta que guarda en alojamiento.json y data.json
                const response = await fetch('/api/pagina/crear', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ pageTitle })
                });

                const result = await response.json();

                if (response.ok) {
                    messageElement.textContent = result.message || 'Artículo guardado y actualizado.';
                    // Llama a la función para cargar el artículo después de guardar
                    await loadLastArticle();
                } else {
                    messageElement.textContent = result.error || 'Error al guardar y generar la página.';
                }
            } catch (error) {
                console.error('Error al guardar el artículo:', error);
                messageElement.textContent = 'Error al guardar el artículo.';
            }
        });
    }

    // El resto de la lógica para el acordeón se maneja en script.js ahora
    // y la lógica de cargar enlaces se mantiene en script.js
});

````
_________
````
archivo server.js

const express = require('express');
const path = require('path');
const fs = require('fs').promises; 
const fetch = require('node-fetch');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

const DATA_FILE_PATH = path.join(__dirname, 'data.json');
const ALOJAMIENTO_FILE = path.join(__dirname, 'alojamiento.json');
const INDICE_FILE = path.join(__dirname, 'indice.json');
const PAGES_DIR = path.join(__dirname, 'public', 'paginas');

// Función para crear el archivo HTML de la página dinámica
async function crearPagina(nombre, titulo, contenido) {
    const filePath = path.join(PAGES_DIR, `${nombre}.html`);
    const sanitizedTitulo = titulo.replace(/</g, '&lt;').replace(/>/g, '&gt;');
    const sanitizedContenido = contenido.replace(/</g, '&lt;').replace(/>/g, '&gt;');

    const html = `
<!doctype html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>${sanitizedTitulo}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f4f4f4; color: #333; }
        .container { max-width: 800px; margin: auto; background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }
        h1 { color: #333; }
        a { text-decoration: none; color: #007bff; }
    </style>
</head>
<body>
    <div class="container">
        <h1>${sanitizedTitulo}</h1>
        <p>${sanitizedContenido}</p>
        <a href="/">⬅️ Volver al inicio</a>
    </div>
</body>
</html>`;

    await fs.mkdir(PAGES_DIR, { recursive: true });
    await fs.writeFile(filePath, html, 'utf8');
    return `/paginas/${nombre}.html`;
}

// Función auxiliar para eliminar duplicados de un array de objetos
function eliminarDuplicados(arr, key) {
    const seen = new Set();
    return arr.filter(item => {
        const value = item[key];
        if (seen.has(value)) {
            return false;
        } else {
            seen.add(value);
            return true;
        }
    });
}

// Ruta POST para crear la página dinámica y guardar en data.json, alojamiento.json e indice.json
app.post('/api/pagina/crear', async (req, res) => {
    const { pageTitle } = req.body;
    if (!pageTitle) {
        return res.status(400).json({ error: 'El título de la página es requerido.' });
    }

    try {
        const apiUrl = `https://es.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(pageTitle)}`;
        const response = await fetch(apiUrl);
        if (!response.ok) {
            if (response.status === 404) {
                return res.status(404).json({ error: 'No se encontró el artículo en Wikipedia.' });
            }
            throw new Error(`Error en la API de Wikipedia. Status: ${response.status}`);
        }

        const data = await response.json();
        const cleanPageTitle = pageTitle.replace(/[^a-zA-Z0-9_]/g, '');
        const pageUrl = await crearPagina(cleanPageTitle, data.title, data.extract);

        // Guardar el artículo en data.json
        const articuloData = { title: data.title, summary: data.extract };
        await fs.writeFile(DATA_FILE_PATH, JSON.stringify(articuloData, null, 2), 'utf8');
        console.log('Artículo guardado en data.json');

        // Guardar el enlace en alojamiento.json (con eliminación de duplicados)
        const newLink = {
            title: data.title,
            url: `https://es.wikipedia.org/wiki/${data.title}`,
            summary: data.extract
        };

        const alojamientoData = await fs.readFile(ALOJAMIENTO_FILE, 'utf8').catch(() => '[]');
        let links = JSON.parse(alojamientoData);
        if (!Array.isArray(links)) {
            links = [];
        }
        links.push(newLink);
        const uniqueLinks = eliminarDuplicados(links, 'url');
        await fs.writeFile(ALOJAMIENTO_FILE, JSON.stringify(uniqueLinks, null, 2), 'utf8');
        console.log('Enlace guardado exitosamente en alojamiento.json (sin duplicados)');

        // Actualizar indice.json (con eliminación de duplicados)
        let indice = {};
        try {
            const indiceData = await fs.readFile(INDICE_FILE, 'utf8');
            indice = JSON.parse(indiceData);
        } catch (e) {
            if (e.code === 'ENOENT') {
                console.log('El archivo indice.json no existe. Creando uno nuevo.');
            } else {
                console.error('Error al leer indice.json:', e);
            }
        }
        
        indice[cleanPageTitle] = {
            title: data.title,
            url: pageUrl
        };
        // Para el índice, convertimos el objeto a un arreglo para poder filtrar
        const indiceArray = Object.keys(indice).map(key => ({ key: key, ...indice[key] }));
        const uniqueIndiceArray = eliminarDuplicados(indiceArray, 'key');
        // Y lo volvemos a convertir a objeto
        const uniqueIndice = uniqueIndiceArray.reduce((obj, item) => {
            obj[item.key] = { title: item.title, url: item.url };
            return obj;
        }, {});
        await fs.writeFile(INDICE_FILE, JSON.stringify(uniqueIndice, null, 2), 'utf8');
        console.log('Índice actualizado en indice.json (sin duplicados)');

        res.status(200).json({
            message: 'Página dinámica creada y artículo guardado en todos los archivos.',
            title: data.title,
            summary: data.extract,
            pageUrl: pageUrl
        });

    } catch (error) {
        console.error('Error en la ruta POST /api/pagina/crear:', error);
        res.status(500).json({ error: 'Error al procesar la solicitud para crear la página.' });
    }
});

// Ruta para cargar todos los enlaces guardados
app.get('/api/enlaces', (req, res) => {
    fs.readFile(ALOJAMIENTO_FILE, 'utf8')
      .then(data => {
        try {
          const enlaces = JSON.parse(data);
          if (!Array.isArray(enlaces)) {
            return res.json([]);
          }
          res.json(enlaces);
        } catch (e) {
          res.status(500).json({ error: 'Error en el formato del archivo de datos.' });
        }
      })
      .catch(err => {
        if (err.code === 'ENOENT') {
          return res.json([]);
        }
        res.status(500).json({ error: 'Error al cargar los enlaces.' });
      });
});

// Ruta para cargar el artículo guardado en data.json
app.get('/api/articulo', (req, res) => {
    fs.readFile(DATA_FILE_PATH, 'utf8')
      .then(data => {
        try {
          const jsonData = JSON.parse(data);
          res.json(jsonData);
        } catch (e) {
          res.status(500).json({ error: 'Formato de archivo JSON incorrecto' });
        }
      })
      .catch(err => {
        if (err.code === 'ENOENT') {
          return res.status(404).json({ error: 'El archivo de datos no existe.' });
        }
        res.status(500).json({ error: 'No se pudo cargar el artículo' });
      });
});










_____________________
------------------
-__________________
**user**: /my-project/
├── node_modules/
├── public/
│ ├── index.html
│ ├── script.js
│ └── cliente.js
│
├── server.js
├── package.json
├── data.json
├── alojamiento.json
└── indice.json


___________________
_________
````
archivo public/index.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gestor de Contenido Dinámico</title> 
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 20px;
    background-color: #f4f4f4;
    color: #333;
}
.container {
    max-width: 800px;
    margin: auto;
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}
h1, h2 {
    color: #333;
}
button {
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
}
#save-button, #load-links-button {
    background-color: #007bff;
    color: white;
}
#load-links-button {
    background-color: #28a745;
}
ul {
    list-style-type: none;
    padding: 0;
}
li {
    background: #e9ecef;
    padding: 10px;
    margin-bottom: 8px;
    border-radius: 4px;
}
.status-message {
    margin-top: 10px;
    font-style: italic;
    color: #666;
}
#wikipedia-link-input {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
    box-sizing: border-box;
}
.accordion-header {
    background-color: #007bff;
    color: white;
    padding: 18px;
    width: 100%;
    border: none;
    text-align: left;
    outline: none;
    font-size: 18px;
    transition: background-color 0.3s ease;
    cursor: pointer;
    margin-top: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}
.accordion-header:hover {
    background-color: #0056b3;
}
.accordion-content {
    padding: 0 18px;
    background-color: white;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
    display: none;
}
</style>
</head>
<body>

    <div class="container">
        <h1>Gestor de Contenido Dinámico</h1>
        
        <h2>1. Guardar Enlace de Wikipedia</h2>
        <p>Introduce el título de un artículo de Wikipedia (ej: `Inteligencia_artificial`) y haz clic en el botón para guardar y mostrar el resumen.</p>
        <input type="text" id="wikipedia-link-input" placeholder="Ejemplo: Inteligencia_artificial">
        <button id="save-button">Guardar Enlace</button>
        <p class="status-message" id="message"></p>

        <hr>
        
        <h2>2. Artículo Guardado Anteriormente</h2>
        <p>Esta sección muestra el último artículo guardado en un menú desplegable.</p>
        
        <div id="accordion-header" class="accordion-header">
            <span>Haz clic para ver el artículo...</span>
        </div>
        <div id="accordion-content" class="accordion-content">
            <p></p>
        </div>

        <hr>

        <h2>3. Cargar Lista de Enlaces</h2>
        <p>Haz clic en el botón para obtener y mostrar todos los enlaces guardados en el archivo.</p>
        <button id="load-links-button">Cargar Enlaces</button>
        <p class="status-message" id="links-status"></p>
        <ul id="links-list">
            </ul>
        
    </div>
    <script src="script.js" type="module"></script>
    <script src="cliente.js"></script>
</body>
</html>

````
_________
````
archivo public/script.js

document.addEventListener('DOMContentLoaded', () => {
    // Nuevos elementos para la funcionalidad de enlaces
    const loadLinksButton = document.getElementById('load-links-button');
    const linksList = document.getElementById('links-list');
    const linksStatus = document.getElementById('links-status');
  
    // Lógica para cargar todos los enlaces guardados
    if (loadLinksButton) {
        loadLinksButton.addEventListener('click', async () => {
            linksStatus.textContent = 'Cargando enlaces...';
            linksList.innerHTML = '';
            try {
                const response = await fetch('/api/enlaces');
                const enlaces = await response.json();
  
                if (response.ok) {
                    if (enlaces.length > 0) {
                        enlaces.forEach(enlace => {
                            const li = document.createElement('li');
                            const a = document.createElement('a');
                            a.href = enlace.url;
                            a.textContent = enlace.title;
                            a.target = '_blank';
                            li.appendChild(a);
                            linksList.appendChild(li);
                        });
                        linksStatus.textContent = `Se cargaron ${enlaces.length} enlaces.`;
                    } else {
                        linksStatus.textContent = 'No hay enlaces guardados.';
                    }
                } else {
                    linksStatus.textContent = enlaces.error || 'No se pudieron cargar los enlaces.';
                }
            } catch (error) {
                console.error('Error al cargar los enlaces:', error);
                linksStatus.textContent = 'Hubo un problema al cargar los enlaces.';
            }
        });
    }

    // Lógica para el acordeón (desplegar/plegar)
    const accordionHeader = document.getElementById('accordion-header');
    const accordionContent = document.getElementById('accordion-content');

    if (accordionHeader) {
        accordionHeader.addEventListener('click', () => {
            if (accordionContent.style.maxHeight) {
                accordionContent.style.maxHeight = null;
                accordionContent.style.display = 'none';
            } else {
                accordionContent.style.display = 'block';
                accordionContent.style.maxHeight = accordionContent.scrollHeight + 'px';
            }
        });
    }
});

````
_________
````
archivo public/cliente.js

document.addEventListener('DOMContentLoaded', () => {
    const saveButton = document.getElementById('save-button');
    const messageElement = document.getElementById('message');
    const inputElement = document.getElementById('wikipedia-link-input');
    
    // Nuevos elementos para el acordeón
    const accordionHeader = document.getElementById('accordion-header');
    const accordionContent = document.getElementById('accordion-content');
    const accordionSpan = accordionHeader.querySelector('span'); // Selecciona el span dentro del header

    const loadLastArticle = async () => {
        accordionContent.style.maxHeight = '0';
        accordionContent.style.display = 'none';
        accordionSpan.textContent = 'Cargando artículo...';

        try {
            const response = await fetch('/api/articulo'); // Carga el último artículo guardado en data.json
            const result = await response.json();
            
            if (response.ok && result.title && result.summary) {
                // Actualizar el contenido del acordeón
                accordionSpan.textContent = result.title;
                accordionContent.innerHTML = `<p>${result.summary}</p>`;
                accordionContent.style.display = 'block';
                accordionContent.style.maxHeight = accordionContent.scrollHeight + 'px';
                
                messageElement.textContent = 'Página dinámica creada y contenido cargado.';
            } else {
                messageElement.textContent = result.error || 'No se pudo cargar el artículo.';
                accordionSpan.textContent = 'Error al cargar';
                accordionContent.innerHTML = `<p>${result.error || 'No se pudo cargar el artículo'}</p>`;
            }
        } catch (error) {
            console.error('Error al cargar el último artículo:', error);
            messageElement.textContent = 'Hubo un problema al conectar con el servidor para cargar el artículo.';
            accordionSpan.textContent = 'Error de conexión';
            accordionContent.innerHTML = `<p>Hubo un problema al conectar con el servidor.</p>`;
        }
    };
    
    if (saveButton) {
        saveButton.addEventListener('click', async () => {
            const pageTitle = inputElement.value.trim();
            if (!pageTitle) {
                messageElement.textContent = 'Por favor, introduce un título de Wikipedia.';
                return;
            }

            messageElement.textContent = 'Guardando resumen del artículo y actualizando vista...';
            try {
                // Llama a la ruta que guarda en alojamiento.json y data.json
                const response = await fetch('/api/pagina/crear', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ pageTitle })
                });

                const result = await response.json();

                if (response.ok) {
                    messageElement.textContent = result.message || 'Artículo guardado y actualizado.';
                    // Llama a la función para cargar el artículo después de guardar
                    await loadLastArticle();
                } else {
                    messageElement.textContent = result.error || 'Error al guardar y generar la página.';
                }
            } catch (error) {
                console.error('Error al guardar el artículo:', error);
                messageElement.textContent = 'Error al guardar el artículo.';
            }
        });
    }

    // El resto de la lógica para el acordeón se maneja en script.js ahora
    // y la lógica de cargar enlaces se mantiene en script.js
});

````
_________
````
archivo server.js

const express = require('express');
const path = require('path');
const fs = require('fs').promises; 
const fetch = require('node-fetch');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

const DATA_FILE_PATH = path.join(__dirname, 'data.json');
const ALOJAMIENTO_FILE = path.join(__dirname, 'alojamiento.json');
const INDICE_FILE = path.join(__dirname, 'indice.json');
const PAGES_DIR = path.join(__dirname, 'public', 'paginas');

// Función para crear el archivo HTML de la página dinámica
async function crearPagina(nombre, titulo, contenido) {
    const filePath = path.join(PAGES_DIR, `${nombre}.html`);
    const sanitizedTitulo = titulo.replace(/</g, '&lt;').replace(/>/g, '&gt;');
    const sanitizedContenido = contenido.replace(/</g, '&lt;').replace(/>/g, '&gt;');

    const html = `
<!doctype html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>${sanitizedTitulo}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f4f4f4; color: #333; }
        .container { max-width: 800px; margin: auto; background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }
        h1 { color: #333; }
        a { text-decoration: none; color: #007bff; }
    </style>
</head>
<body>
    <div class="container">
        <h1>${sanitizedTitulo}</h1>
        <p>${sanitizedContenido}</p>
        <a href="/">⬅️ Volver al inicio</a>
    </div>
</body>
</html>`;

    await fs.mkdir(PAGES_DIR, { recursive: true });
    await fs.writeFile(filePath, html, 'utf8');
    return `/paginas/${nombre}.html`;
}

// Función auxiliar para eliminar duplicados de un array de objetos
function eliminarDuplicados(arr, key) {
    const seen = new Set();
    return arr.filter(item => {
        const value = item[key];
        if (seen.has(value)) {
            return false;
        } else {
            seen.add(value);
            return true;
        }
    });
}

// Ruta POST para crear la página dinámica y guardar en data.json, alojamiento.json e indice.json
app.post('/api/pagina/crear', async (req, res) => {
    const { pageTitle } = req.body;
    if (!pageTitle) {
        return res.status(400).json({ error: 'El título de la página es requerido.' });
    }

    try {
        const apiUrl = `https://es.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(pageTitle)}`;
        const response = await fetch(apiUrl);
        if (!response.ok) {
            if (response.status === 404) {
                return res.status(404).json({ error: 'No se encontró el artículo en Wikipedia.' });
            }
            throw new Error(`Error en la API de Wikipedia. Status: ${response.status}`);
        }

        const data = await response.json();
        const cleanPageTitle = pageTitle.replace(/[^a-zA-Z0-9_]/g, '');
        const pageUrl = await crearPagina(cleanPageTitle, data.title, data.extract);

        // Guardar el artículo en data.json
        const articuloData = { title: data.title, summary: data.extract };
        await fs.writeFile(DATA_FILE_PATH, JSON.stringify(articuloData, null, 2), 'utf8');
        console.log('Artículo guardado en data.json');

        // Guardar el enlace en alojamiento.json (con eliminación de duplicados)
        const newLink = {
            title: data.title,
            url: `https://es.wikipedia.org/wiki/${data.title}`,
            summary: data.extract
        };

        const alojamientoData = await fs.readFile(ALOJAMIENTO_FILE, 'utf8').catch(() => '[]');
        let links = JSON.parse(alojamientoData);
        if (!Array.isArray(links)) {
            links = [];
        }
        links.push(newLink);
        const uniqueLinks = eliminarDuplicados(links, 'url');
        await fs.writeFile(ALOJAMIENTO_FILE, JSON.stringify(uniqueLinks, null, 2), 'utf8');
        console.log('Enlace guardado exitosamente en alojamiento.json (sin duplicados)');

        // Actualizar indice.json (con eliminación de duplicados)
        let indice = {};
        try {
            const indiceData = await fs.readFile(INDICE_FILE, 'utf8');
            indice = JSON.parse(indiceData);
        } catch (e) {
            if (e.code === 'ENOENT') {
                console.log('El archivo indice.json no existe. Creando uno nuevo.');
            } else {
                console.error('Error al leer indice.json:', e);
            }
        }
        
        indice[cleanPageTitle] = {
            title: data.title,
            url: pageUrl
        };
        // Para el índice, convertimos el objeto a un arreglo para poder filtrar
        const indiceArray = Object.keys(indice).map(key => ({ key: key, ...indice[key] }));
        const uniqueIndiceArray = eliminarDuplicados(indiceArray, 'key');
        // Y lo volvemos a convertir a objeto
        const uniqueIndice = uniqueIndiceArray.reduce((obj, item) => {
            obj[item.key] = { title: item.title, url: item.url };
            return obj;
        }, {});
        await fs.writeFile(INDICE_FILE, JSON.stringify(uniqueIndice, null, 2), 'utf8');
        console.log('Índice actualizado en indice.json (sin duplicados)');

        res.status(200).json({
            message: 'Página dinámica creada y artículo guardado en todos los archivos.',
            title: data.title,
            summary: data.extract,
            pageUrl: pageUrl
        });

    } catch (error) {
        console.error('Error en la ruta POST /api/pagina/crear:', error);
        res.status(500).json({ error: 'Error al procesar la solicitud para crear la página.' });
    }
});

// Ruta para cargar todos los enlaces guardados
app.get('/api/enlaces', (req, res) => {
    fs.readFile(ALOJAMIENTO_FILE, 'utf8')
      .then(data => {
        try {
          const enlaces = JSON.parse(data);
          if (!Array.isArray(enlaces)) {
            return res.json([]);
          }
          res.json(enlaces);
        } catch (e) {
          res.status(500).json({ error: 'Error en el formato del archivo de datos.' });
        }
      })
      .catch(err => {
        if (err.code === 'ENOENT') {
          return res.json([]);
        }
        res.status(500).json({ error: 'Error al cargar los enlaces.' });
      });
});

// Ruta para cargar el artículo guardado en data.json
app.get('/api/articulo', (req, res) => {
    fs.readFile(DATA_FILE_PATH, 'utf8')
      .then(data => {
        try {
          const jsonData = JSON.parse(data);
          res.json(jsonData);
        } catch (e) {
          res.status(500).json({ error: 'Formato de archivo JSON incorrecto' });
        }
      })
      .catch(err => {
        if (err.code === 'ENOENT') {
          return res.status(404).json({ error: 'El archivo de datos no existe.' });
        }
        res.status(500).json({ error: 'No se pudo cargar el artículo' });
      });
});

app.listen(PORT, () => {
  console.log(`Servidor escuchando en http://localhost:${PORT}`);
});


````
___________
_________

_________________________-
_________________________
_________________________-
_________________________subir desplegar
**bard**: Tu proyecto actual ya tiene una estructura básica de una aplicación web, pero para hacerlo más robusto, mantenible y escalable, es una excelente idea refactorizarlo y pensar en la integración continua/despliegue continuo (CI/CD). La inyección de dependencias es un patrón clave para lograr esto, ya que mejora la modularidad y la capacidad de prueba.

-----

## 1\. Refactorización para inyección de dependencias (DI)

La inyección de dependencias (DI) es un patrón de diseño que te permite desacoplar los componentes de tu aplicación. En lugar de que un componente cree sus propias dependencias, estas se le "inyectan" desde el exterior.

### ¿Por qué hacer esto? 🤔

  * **Modularidad:** Los componentes son más independientes y se pueden reutilizar más fácilmente.
  * **Capacidad de prueba:** Puedes "inyectar" dependencias simuladas (mocks) durante las pruebas, lo que hace que los tests unitarios sean más sencillos y rápidos.
  * **Mantenimiento:** Es más fácil cambiar o actualizar una dependencia sin modificar el código del componente que la usa.

### Cómo aplicarlo a tu proyecto

Tu `server.js` es el lugar ideal para empezar. Actualmente, todas las funciones y dependencias (como `fs`, `path`, `fetch`) están acopladas directamente al código de las rutas. Para refactorizar, puedes crear un módulo de "servicio" que maneje la lógica de negocio y luego inyectarlo en tus rutas.




_________________________-
_________________________
_________________________-
_________________________codigo 
```javascript
// Paso 1: Crea un nuevo archivo de servicio, por ejemplo, `wikipediaService.js`

// wikipediaService.js
const fs = require('fs').promises;
const path = require('path');
const fetch = require('node-fetch');

// Define las rutas de los archivos fuera de la función, o inyectalas.
const DATA_FILE_PATH = path.join(__dirname, 'data.json');
const ALOJAMIENTO_FILE = path.join(__dirname, 'alojamiento.json');
const INDICE_FILE = path.join(__dirname, 'indice.json');
const PAGES_DIR = path.join(__dirname, 'public', 'paginas');

// Función auxiliar para eliminar duplicados (se puede inyectar también)
function eliminarDuplicados(arr, key) {
    const seen = new Set();
    return arr.filter(item => {
        const value = item[key];
        if (seen.has(value)) {
            return false;
        } else {
            seen.add(value);
            return true;
        }
    });
}

// Ahora, el servicio se encarga de toda la lógica de negocio
class WikipediaService {
    constructor() {
        this.fs = fs;
        this.fetch = fetch;
        this.paths = {
            data: DATA_FILE_PATH,
            alojamiento: ALOJAMIENTO_FILE,
            indice: INDICE_FILE,
            pagesDir: PAGES_DIR
        };
    }

    async getArticleSummary(pageTitle) {
        const apiUrl = `https://es.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(pageTitle)}`;
        const response = await this.fetch(apiUrl);
        if (!response.ok) {
            if (response.status === 404) {
                throw new Error('No se encontró el artículo en Wikipedia.', { cause: 404 });
            }
            throw new Error(`Error en la API de Wikipedia. Status: ${response.status}`);
        }
        return response.json();
    }

    async saveArticle(articleData) {
        // Lógica para guardar en data.json
        await this.fs.writeFile(this.paths.data, JSON.stringify(articleData, null, 2), 'utf8');

        // Lógica para guardar en alojamiento.json
        const newLink = {
            title: articleData.title,
            url: `https://es.wikipedia.org/wiki/${articleData.title}`,
            summary: articleData.summary
        };
        const alojamientoData = await this.fs.readFile(this.paths.alojamiento, 'utf8').catch(() => '[]');
        let links = JSON.parse(alojamientoData);
        if (!Array.isArray(links)) links = [];
        links.push(newLink);
        const uniqueLinks = eliminarDuplicados(links, 'url');
        await this.fs.writeFile(this.paths.alojamiento, JSON.stringify(uniqueLinks, null, 2), 'utf8');

        // Lógica para actualizar indice.json
        // ... (el mismo código de tu server.js)
    }
}

// Exporta una instancia para que se pueda usar como un "singleton" simple
module.exports = new WikipediaService();
```

_________________________-
_________________________
_________________________-
_________________________codigo 





-----

## 2\. Integrando CI/CD (Continuous Integration / Continuous Deployment)

CI/CD es una metodología que automatiza los procesos de construcción, prueba y despliegue de tu software.

  * **Integración Continua (CI):** Cada vez que subes código al repositorio (por ejemplo, con `git push`), un servidor automatizado ejecuta un conjunto de pruebas para asegurarse de que el nuevo código no rompe nada.
  * **Despliegue Continuo (CD):** Si las pruebas de CI pasan, el código se despliega automáticamente en un entorno de producción (o de staging).

### ¿Por qué es crucial? 🚀

  * **Detección temprana de errores:** Los errores se encuentran antes de que lleguen a producción.
  * **Despliegues más rápidos y frecuentes:** Puedes lanzar nuevas características o correcciones de errores en cuestión de minutos.
  * **Reducción del riesgo:** El proceso automatizado elimina el error humano del despliegue manual.

### Paso a paso para implementar un CI/CD básico con GitHub Actions

**GitHub Actions** es una herramienta gratuita (para repositorios públicos) que te permite crear flujos de trabajo de CI/CD directamente en tu repositorio de GitHub.

#### 1\. Prepara tu proyecto

  * **Crea un repositorio en GitHub:** Sube todo tu código a este repositorio.
  * **Añade un archivo de pruebas:** Crea un archivo `test.js` para probar tu `wikipediaService.js`. Puedes usar una biblioteca como **Mocha** y **Chai**.










<!-- end list -->



_________________________-
_________________________
_________________________-
_________________________codigo   dependencias
```bash
# Instala las dependencias de prueba
npm install mocha chai --save-dev
```

_________________________-
_________________________codigo   dependencias
_________________________-
_________________________codigo


_________________________-
_________________________
_________________________-
_________________________codigo

```javascript
// test.js
const { expect } = require('chai');
const sinon = require('sinon'); // Para simular dependencias
const fs = require('fs').promises;
const WikipediaService = require('./wikipediaService');

// Simula el comportamiento de fs.writeFile para no escribir en archivos reales
const fsStub = sinon.stub(fs, 'writeFile').resolves();

describe('WikipediaService', () => {
    let service;

    beforeEach(() => {
        // Crea una nueva instancia del servicio antes de cada prueba
        service = new WikipediaService();
    });

    afterEach(() => {
        // Limpia el stub después de cada prueba
        fsStub.reset();
    });

    it('should call fs.writeFile when saving an article', async () => {
        const mockArticle = { title: 'Test', summary: 'Mock summary.' };
        await service.saveArticle(mockArticle);

        // Verifica que la función stub fue llamada
        expect(fsStub.called).to.be.true;
    });

    // Puedes agregar más pruebas aquí
});
```

_________________________-
_________________________
_________________________-
_________________________codigo




#### 2\. Configura GitHub Actions

  * En tu repositorio de GitHub, ve a la pestaña **"Actions"**.
  * Haz clic en **"set up a workflow yourself"** y pega el siguiente código en el editor.
  * Renombra el archivo a algo como `main.yml` y guárdalo en la carpeta `.github/workflows/`.

<!-- end list -->







_________________________-
_________________________
_________________________-
_________________________codigo

```yaml

# .github/workflows/main.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test
```


_________________________-
_________________________codigo
_________________________-
_________________________



#### 3\. Automatiza los despliegues (CD)

Para el despliegue continuo, necesitas un servicio de hosting que se integre con GitHub. **Heroku** o **Vercel** son opciones populares. Vercel, en particular, tiene una integración muy sencilla.

  * **Configura Vercel:**
    1.  Crea una cuenta en Vercel y enlaza tu repositorio de GitHub.
    2.  Vercel detectará que es una aplicación de Node.js y configurará el despliegue automáticamente.
    3.  Cada vez que el flujo de trabajo de CI de GitHub pase (`npm test`), Vercel detectará el nuevo `push` y desplegará la última versión del código en un servidor.

El flujo es el siguiente:
**Tú (`git push`) ➡️ GitHub (CI: `npm test`) ➡️ Vercel (CD: `Despliegue automático`)**

Este es un camino simplificado para comenzar con CI/CD. A medida que tu proyecto crezca, puedes agregar más pasos como análisis de seguridad, despliegues en múltiples entornos (staging, producción), y más.

````





























--------->desde server.js
archivo Anteriormente



// const express = require('express');
// const path = require('path');
// const fs = require('fs').promises; 
// const fetch = require('node-fetch');

// const app = express();
// const PORT = process.env.PORT || 3000;

// app.use(express.json());
// app.use(express.static(path.join(__dirname, 'public')));

// const DATA_FILE_PATH = path.join(__dirname, 'data.json');
// const ALOJAMIENTO_FILE = path.join(__dirname, 'alojamiento.json');
// const INDICE_FILE = path.join(__dirname, 'indice.json');
// const PAGES_DIR = path.join(__dirname, 'public', 'paginas');

// // Función para crear el archivo HTML de la página dinámica
// async function crearPagina(nombre, titulo, contenido) {
//     const filePath = path.join(PAGES_DIR, `${nombre}.html`);
//     const sanitizedTitulo = titulo.replace(/</g, '&lt;').replace(/>/g, '&gt;');
//     const sanitizedContenido = contenido.replace(/</g, '&lt;').replace(/>/g, '&gt;');

//     const html = `
// <!doctype html>
// <html lang="es">
// <head>
//     <meta charset="UTF-8">
//     <title>${sanitizedTitulo}</title>
//     <style>
//         body { font-family: Arial, sans-serif; margin: 20px; background-color: #f4f4f4; color: #333; }
//         .container { max-width: 800px; margin: auto; background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }
//         h1 { color: #333; }
//         a { text-decoration: none; color: #007bff; }
//     </style>
// </head>
// <body>
//     <div class="container">
//         <h1>${sanitizedTitulo}</h1>
//         <p>${sanitizedContenido}</p>
//         <a href="/">⬅️ Volver al inicio</a>
//     </div>
// </body>
// </html>`;

//     await fs.mkdir(PAGES_DIR, { recursive: true });
//     await fs.writeFile(filePath, html, 'utf8');
//     return `/paginas/${nombre}.html`;
// }

// // Ruta POST para crear la página dinámica y guardar en data.json, alojamiento.json e indice.json
// app.post('/api/pagina/crear', async (req, res) => {
//     const { pageTitle } = req.body;
//     if (!pageTitle) {
//         return res.status(400).json({ error: 'El título de la página es requerido.' });
//     }

//     try {
//         const apiUrl = `https://es.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(pageTitle)}`;
//         const response = await fetch(apiUrl);
//         if (!response.ok) {
//             if (response.status === 404) {
//                 return res.status(404).json({ error: 'No se encontró el artículo en Wikipedia.' });
//             }
//             throw new Error(`Error en la API de Wikipedia. Status: ${response.status}`);
//         }

//         const data = await response.json();
//         const cleanPageTitle = pageTitle.replace(/[^a-zA-Z0-9_]/g, '');
//         const pageUrl = await crearPagina(cleanPageTitle, data.title, data.extract);

//         // Guardar el artículo en data.json
//         const articuloData = { title: data.title, summary: data.extract };
//         await fs.writeFile(DATA_FILE_PATH, JSON.stringify(articuloData, null, 2), 'utf8');
//         console.log('Artículo guardado en data.json');

//         // Guardar el enlace en alojamiento.json (lógica anterior)
//         const newLink = {
//             title: data.title,
//             url: `https://es.wikipedia.org/wiki/${data.title}`,
//             summary: data.extract
//         };

//         const alojamientoData = await fs.readFile(ALOJAMIENTO_FILE, 'utf8').catch(() => '[]');
//         let links = JSON.parse(alojamientoData);
//         if (!Array.isArray(links)) {
//             links = [];
//         }
//         links.push(newLink);
//         await fs.writeFile(ALOJAMIENTO_FILE, JSON.stringify(links, null, 2), 'utf8');
//         console.log('Enlace guardado exitosamente en alojamiento.json');

//         // Actualizar indice.json
//         let indice = {};
//         try {
//             const indiceData = await fs.readFile(INDICE_FILE, 'utf8');
//             indice = JSON.parse(indiceData);
//         } catch (e) {
//             if (e.code === 'ENOENT') {
//                 console.log('El archivo indice.json no existe. Creando uno nuevo.');
//             } else {
//                 console.error('Error al leer indice.json:', e);
//             }
//         }
        
//         indice[cleanPageTitle] = {
//             title: data.title,
//             url: pageUrl
//         };
//         await fs.writeFile(INDICE_FILE, JSON.stringify(indice, null, 2), 'utf8');

//         res.status(200).json({
//             message: 'Página dinámica creada y artículo guardado en todos los archivos.',
//             title: data.title,
//             summary: data.extract,
//             pageUrl: pageUrl
//         });

//     } catch (error) {
//         console.error('Error en la ruta POST /api/pagina/crear:', error);
//         res.status(500).json({ error: 'Error al procesar la solicitud para crear la página.' });
//     }
// });

// // La ruta POST /api/articulo/guardar ya no es necesaria, la he eliminado para evitar duplicación.

// // Ruta para cargar todos los enlaces guardados
// app.get('/api/enlaces', (req, res) => {
//     fs.readFile(ALOJAMIENTO_FILE, 'utf8')
//       .then(data => {
//         try {
//           const enlaces = JSON.parse(data);
//           if (!Array.isArray(enlaces)) {
//             return res.json([]);
//           }
//           res.json(enlaces);
//         } catch (e) {
//           res.status(500).json({ error: 'Error en el formato del archivo de datos.' });
//         }
//       })
//       .catch(err => {
//         if (err.code === 'ENOENT') {
//           return res.json([]);
//         }
//         res.status(500).json({ error: 'Error al cargar los enlaces.' });
//       });
// });

// // Ruta para cargar el artículo guardado en data.json
// app.get('/api/articulo', (req, res) => {
//     fs.readFile(DATA_FILE_PATH, 'utf8')
//       .then(data => {
//         try {
//           const jsonData = JSON.parse(data);
//           res.json(jsonData);
//         } catch (e) {
//           res.status(500).json({ error: 'Formato de archivo JSON incorrecto' });
//         }
//       })
//       .catch(err => {
//         if (err.code === 'ENOENT') {
//           return res.status(404).json({ error: 'El archivo de datos no existe.' });
//         }
//         res.status(500).json({ error: 'No se pudo cargar el artículo' });
//       });
// });

// app.listen(PORT, () => {
//   console.log(`Servidor escuchando en http://localhost:${PORT}`);
// });

